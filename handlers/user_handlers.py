import datetime
from aiogram import types, Bot
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import Router, F
from aiogram.filters import Text, Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, ContentType
from aiogram.fsm.state import default_state
from datetime import datetime
from bot import main
from aiogram.types import ContentType

from keyboards.keyboard_utils import start_geoex
from keyboards.keyboard_inline import keyboard_url_contact
from config_data.config import load_config
from keyboards import keyboard_inline
from lexicon.lexicon import LEXICON_RU
from database import sqlite, models
from FSM.users import FSMUsersAnEyebrow

config = load_config(".env")
bot = Bot(token=config.tg_bot.token)

router: Router = Router()


@router.message(Command(commands=["start"]))
async def process_start_handler(message: Message) -> None:
    models.add_user(message.from_user.username, message.from_user.id)
    
    try:
        await message.answer(
            text=(LEXICON_RU["commands"]["/start"].format(first_name=message.from_user.first_name)),
            reply_markup=start_geoex
        )    
    except Exception:
        await message.answer(
            text=(LEXICON_RU["commands"]["/start"].format(first_name="–ö—Ä–∞—Å–æ—Ç–∫–∞")),
            reply_markup=start_geoex
        )     

@router.message(Command(commands=["/help"]))
async def text_handler(message: Message) -> None:
    await message.answer(
        text=(LEXICON_RU["commands"]["/help"]),
        reply_markup=start_geoex
    )   

@router.message(Text(text=LEXICON_RU["keyboard"]["geomap"]))
async def process_geomap(message: Message):
    await message.answer(
        text=(LEXICON_RU["answer"]["geoanswer"])
    )
    await message.answer_location(45.055902, 39.042300)

@router.message(Text(text=LEXICON_RU["keyboard"]["exwork"]))
async def process_exwork(message: Message):
    await message.answer(text="–°–≤–æ–∏ —Ä–∞–±–æ—Ç—ã —è –≤—ã–∫–ª–∞–¥—ã–≤–∞—é –≤ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º–º, —Ç–∞–∫–∂–µ —Ç–∞–º –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ ü•∞",
    reply_markup=keyboard_inline.start_keyboard_url_inst.as_markup())

@router.message(Text(text=LEXICON_RU["keyboard"]["contact"]))
async def process_contact(message: Message):
    await message.answer(
        text=LEXICON_RU["inlinebutton"]["contact_text"],
        reply_markup=keyboard_url_contact
    )

@router.message(Text(text=LEXICON_RU["keyboard"]["price"]))
async def process_price(message: Message):
    prices = models.get_prices()
    if not prices:
        await message.answer(text="–Ω–µ—Ç —É—Å–ª—É–≥")
    else:
        text = f"{LEXICON_RU['inlinebutton']['price_text']}"
        for row in prices:
            text += f"‚ú®{row.service} - {row.price} —Ä—É–±–ª–µ–π\n\n"

        keyboard_price_enwork = keyboard_inline.keyboard_price_enwork()

        await message.answer(
            text=text,
            reply_markup=keyboard_price_enwork.as_markup()
        )

@router.message(Text(text=LEXICON_RU["keyboard"]["sale"]))
async def process_sale(message: Message):
    sale = models.get_sale()
    
    if not sale:
        await message.answer(text="–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–∫–∏–¥–æ–∫ –Ω–µ—Ç üòü")
    text = ""
    for row in sale:
        text += f"{row.text}"

    await message.answer(
        text=text
    )    

@router.message(Text(text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞‚òπÔ∏è"))
async def process_error(message: Message):  
    await message.answer(
        text=LEXICON_RU["keyboard"]["error"]
    ) 

# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/cancel" –≤ –ª—é–±—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö,
# –∫—Ä–æ–º–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –∏ –æ—Ç–∫–ª—é—á–∞—Ç—å –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
@router.message(Command(commands='cancel'), ~StateFilter(default_state))
async def process_cancel_command_state(message: Message, state: FSMContext):
    await message.answer(text='–í—ã –ø—Ä–µ—Ä–≤–∞–ª–∏ –∑–∞–ø–∏—Å—å –Ω–∞ –±—Ä–æ–≤–∏\n\n'
                              '–ß—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –ø–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–ø–∏—Å–∏ - '
                              '–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –±—Ä–æ–≤–∫–∏"')
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/cancel" –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
# –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏ —Å–æ–æ–±—â–∞—Ç—å, —á—Ç–æ —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –º–∞—à–∏–Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
@router.message(Command(commands='cancel'), StateFilter(default_state))
async def process_cancel_command(message: Message):
    await message.answer(text='–û—Ç–º–µ–Ω—è—Ç—å –Ω–µ—á–µ–≥–æ. –í—ã –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç–µ—Å—å –Ω–∞ –±—Ä–æ–≤–∏\n\n'
                              '–ß—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å - '
                              '–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –±—Ä–æ–≤–∫–∏"')


# –•—ç–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –±—Ä–æ–≤–∫–∏". –ó–∞–ø—É—Å–∫–∞–µ—Ç FSM
@router.callback_query(Text(text='enwork_brows'), StateFilter(default_state))
async def process_enroll_name_bytton(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer(text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è\n\n\n<i>–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É</i>\n/cancel")
    await state.set_state(FSMUsersAnEyebrow.name)                                  

# –•—ç–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—ã—á–Ω–æ–π –∫–Ω–æ–ø–∫–∏ "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –±—Ä–æ–≤–∫–∏". –ó–∞–ø—É—Å–∫–∞–µ—Ç FSM
@router.message(Text(text=LEXICON_RU["keyboard"]["enroll"]), StateFilter(default_state))
async def process_enroll_command(message: Message, state: FSMContext):
    await message.answer(text="ü§ç–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—èü§ç\n\n\n<i>–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É</i>\n/cancel")
    await state.set_state(FSMUsersAnEyebrow.name)

# –•—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏, –∏ –ø—Ä–æ—Å–∏—Ç –≤—ã–±—Ä–∞—Ç—å —É—Å–ª—É–≥—É
@router.message(StateFilter(FSMUsersAnEyebrow.name), F.text.isalpha())
async def process_enroll_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)

    user_id = message.from_user.id
    await state.update_data(user_id=user_id)

    await state.set_state(FSMUsersAnEyebrow.service)

    keyboard_user_price = keyboard_inline.keyboard_user_price()

    await message.answer(
        text="ü§ç–°–ø–∞—Å–∏–±–æ, –∞ —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è\n\n\n<i>–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É\n</i>/cancel",
        reply_markup=keyboard_user_price.as_markup()
    )

# –•—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –≤–≤–æ–¥ –∏–º–µ–Ω–∏ –≤ –∫–æ—Ç–æ—Ä–æ–º –µ—Å—Ç—å —á—Ç–æ-—Ç–æ –∫—Ä–æ–º—É –±—É–∫–≤
@router.message(StateFilter(FSMUsersAnEyebrow.name))
async def warning_not_name(message: Message):
    await message.answer(text='ü§ç–¢–æ, —á—Ç–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∏–º—è\n\n'
                              '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è\n\n'
                              '<i>–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã - '
                              '–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É</i>/cancel')

# –•—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏ –∏ –ø—Ä–æ—Å–∏—Ç –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –∑–∞–ø–∏—Å–∏
@router.callback_query(StateFilter(FSMUsersAnEyebrow.service))
async def process_service_date(callback: CallbackQuery, state: FSMContext):
    try:
        _, service, price = callback.data.split(':')
        await state.update_data(service=service)
        await state.update_data(price=price)
        data = await state.get_data()
        await state.set_state(FSMUsersAnEyebrow.date)
        
        date_keyboard = keyboard_inline.date_keyboard()

        await callback.message.edit_text(f'üü¢–í—ã –≤—ã–±—Ä–∞–ª–∏ —É—Å–ª—É–≥—É:\n‚ú®{data.get("service")}\n\nü§ç–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –∑–∞–ø–∏—Å–∏:\n\n\n<i>–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É\n</i>/cancel', reply_markup=date_keyboard.as_markup())
    except Exception as error:
        print(f"–û—à–∏–±–∫–∞ ---- {error}")
        await callback.message.edit_text(text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Å–≤–æ–±–æ–¥–Ω—ã—Ö –¥–∞—Ç –Ω–∞ –∑–∞–ø–∏—Å—å –Ω–µ—Ç.")
        await state.clear()                                 

# –•—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –∏ –ø—Ä–æ—Å–∏—Ç –≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏
@router.callback_query(StateFilter(FSMUsersAnEyebrow.date))
async def process_date_time(callback: CallbackQuery, state: FSMContext):
    if callback.data == f"back:{FSMUsersAnEyebrow.service}":
        keyboard_user_price = keyboard_inline.keyboard_user_price()    
        await state.set_state(FSMUsersAnEyebrow.service)
        await callback.message.edit_text(text="ü§ç–°–ø–∞—Å–∏–±–æ, –∞ —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è\n\n\n<i>–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É\n</i>/cancel",
                                        reply_markup=keyboard_user_price.as_markup())
        return                  
    date_ = callback.data

    await state.update_data(date=date_)
    data = await state.get_data()
    await state.set_state(FSMUsersAnEyebrow.time)
    db_time = models.date_to_time(date_)

    time_keyboard = keyboard_inline.time_keyboard(db_time, data.get("date"))   

    await callback.message.edit_text(
        text=f'üü¢–í—ã –≤—ã–±—Ä–∞–ª–∏ —É—Å–ª—É–≥—É:\n‚ú®{data.get("service")}\n\nüü¢–ù–∞ –¥–∞—Ç—É:\n‚ú®{data.get("date")}\n\nü§ç–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –≤–∞—Å –∑–∞–ø–∏—Å–∞—Ç—å:\n\n\n<i>–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É\n</i>/cancel',
        reply_markup=time_keyboard.as_markup()
    )
        

# –•—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ –∏–º–µ–Ω–∏, —É—Å–ª—É–≥–∏, –¥–∞—Ç—ã, –≤—Ä–µ–º–µ–Ω–∏, –ø—Ä–æ—Å–∏—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å
@router.callback_query(StateFilter(FSMUsersAnEyebrow.time))
async def process_enroll_sucsess(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()

    if callback.data == f"back:{FSMUsersAnEyebrow.date}":
        date_keyboard = keyboard_inline.date_keyboard()    
        await state.set_state(FSMUsersAnEyebrow.date)
        await callback.message.edit_text(f'üü¢–í—ã –≤—ã–±—Ä–∞–ª–∏ —É—Å–ª—É–≥—É:\n‚ú®{data.get("service")}.\n\nü§ç–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –∑–∞–ø–∏—Å–∏:\n\n\n<i>–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É\n</i>/cancel',
                                        reply_markup=date_keyboard.as_markup())
        return

    _, time_ = callback.data.split(',')
    await state.update_data(time=time_)
    data = await state.get_data()
    await state.set_state(FSMUsersAnEyebrow.payments)

    sucsess_keyboard = keyboard_inline.sucsess_keyboard() 

    await callback.message.edit_text(
        text=f'‚ú®–ò–º—è:\n<b>{data.get("name")}</b>\n\n‚ú®–£—Å–ª—É–≥–∞:\n<b>{data.get("service")}</b>\n\n‚ú®–î–∞—Ç–∞:\n<b>{data.get("date")}</b>\n\n‚ú®–í—Ä–µ–º—è:\n<b>{data.get("time")}</b>\n\n‚ú®–¶–µ–Ω–∞ —É—Å–ª—É–≥:\n<b>{data.get("price")} —Ä—É–±–ª–µ–π</b>\n\n',
        reply_markup=sucsess_keyboard.as_markup()
    )

# –•—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–∫–∞–∑ –æ—Ç –æ–ø–ª–∞—Ç—ã 
@router.callback_query(StateFilter(FSMUsersAnEyebrow.payments))
async def process_enroll_sucsess_pay(callback: CallbackQuery, state: FSMContext):
    pay_keyboard = keyboard_inline.pay_keyboard()

    if callback.data == "suc_yes":
        await callback.message.edit_text(text=f'ü§ç–ß—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–∞—à—É –∑–∞–ø–∏—Å—å –∏ –æ–±–µ—Å–ø–µ—á–∏—Ç—å –≤–∞–º –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è, –Ω—É–∂–Ω–æ –≤–Ω–µ—Å—Ç–∏ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É <b>–≤ —Ä–∞–∑–º–µ—Ä–µ 200 —Ä—É–±–ª–µ–π</b>\n\n\nüè¶<i>–°–±–µ—Ä–±–∞–Ω–∫</i>üè¶\n\nüíé<b>–¢–µ–ª–µ—Ñ–æ–Ω</b> +7(938)409-97-27\nüíé<b>–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã</b>  5469980420521334', reply_markup=pay_keyboard.as_markup())
        await state.set_state(FSMUsersAnEyebrow.sucsess)
    else:
        await callback.message.edit_text(text="–û—á–µ–Ω—å –∂–∞–ª—å, –Ω–æ –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞, —Ç–æ —è –≤—Å–µ–≥–¥–∞ –±—É–¥—É –≤–∞–º —Ä–∞–¥–∞ü•∞")
        await state.clear()

# –•—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–∫–∞–∑ –æ—Ç –∑–∞–ø–∏—Å–∏  
@router.callback_query(StateFilter(FSMUsersAnEyebrow.sucsess))
async def process_enroll_sucsess_yes(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()

    if callback.data == "pay_yes":
        models.enwork_client_add(name=data.get('name'), service=data.get('service'), client_user_id=data.get('user_id'), price=data.get('price'), date=data.get('date'), time=data.get('time'))
        await bot.send_message(chat_id=-1001544172966, text=f'–ö–ª–∏–µ–Ω—Ç –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π:\n\n–ò–º—è:\n{data.get("name")}\n\n–£—Å–ª—É–≥–∞:\n{data.get("service")}\n\n–î–∞—Ç–∞:\n{data.get("date")}\n\n–í—Ä–µ–º—è:\n{data.get("time")}\n\n–¶–µ–Ω–∞ —É—Å–ª—É–≥:\n{data.get("price")} —Ä—É–±–ª–µ–π\n\n\ntg://user?id={data.get("user_id")}')
        await state.set_state(FSMUsersAnEyebrow.payments)
        await callback.message.edit_text(text=f'–û—Ç–ª–∏—á–Ω–æ, —Ç–æ–≥–¥–∞ —è –≤–∞—Å –∂–¥—É\n–í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n\n‚ú®–ò–º—è:\n<b>{data.get("name")}</b>\n\n‚ú®–£—Å–ª—É–≥–∞:\n<b>{data.get("service")}</b>\n\n‚ú®–î–∞—Ç–∞:\n<b>{data.get("date")}</b>\n\n‚ú®–í—Ä–µ–º—è:\n<b>{data.get("time")}</b>\n\n‚ú®–¶–µ–Ω–∞ —É—Å–ª—É–≥:\n<b>{data.get("price")} —Ä—É–±–ª–µ–π</b>\n\n‚ú®–ê–¥—Ä–µ—Å:\n<b>—É–ª. –ì–µ–Ω–µ—Ä–∞–ª–∞ –¢—Ä–æ—à–µ–≥–æ 17</b>\n\n\nP.S.\n<i>–ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –ø–∏—à–∏—Ç–µ - </i>@liin_ampolina')
        await state.clear()
    else:
        await state.clear()
        await callback.message.edit_text(text="–û—á–µ–Ω—å –∂–∞–ª—å, –Ω–æ –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞, —Ç–æ —è –≤—Å–µ–≥–¥–∞ –±—É–¥—É –≤–∞–º —Ä–∞–¥–∞ü•∞")